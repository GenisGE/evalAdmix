#include <math.h>
#include <fstream>

void adaptF(double **f, double **G, int K, double **q, int N, int M, int withoutInd){


double *bNorm=malloc(sizeof(double)*N[0]*M[0]);
double *aNorm=malloc(sizeof(double)*N[0]*M[0]);
double *fnew=malloc(sizeof(double)*N[0]*K[0]);
double tol=0.00001;

for(int it=0; it<5;it++){



for(int i=0;i<N[0];i++){
  for(int j=0;j<M[0];j++){
    double fpart=0;
    for(int k=0;k<K[0];k++)
      fpart=fpart+f[j*K[0]+k]*q[i*K[0]+k];
    aNorm[i+j*N[0]]=1.0/fpart;
    fpart=1-fpart;
    bNorm[i+j*N[0]]=1.0/fpart;
   
  }

}
 for(int j=0;j<M[0];j++){
    for(int k=0;k<K[0];k++){
      double sumAG=0;
      double sumBG=0;
      for(int i=0;i<N[0];i++){
        if(i==withoutInd[0])
           continue;
        sumAG=sumAG+G[j+i*M[0]]*f[j*K[0]+k]*q[i*K[0]+k]*aNorm[i+j*N[0]];
        sumBG=sumBG+(2-G[j+i*M[0]])*q[i*K[0]+k]*(1-f[j*K[0]+k])*bNorm[i+j*N[0]];
      }
      fnew[j*K[0]+k]=sumAG/(sumAG+sumBG);
    }
  }




for(int k=0;k<K[0];k++){
  for(int j=0;j<M[0];j++){
    f[j*K[0]+k] = fnew[j*K[0]+k];
    if(f[j*K[0]+k] < tol)
       f[j*K[0]+k] = tol;
    if(f[j*K[0]+k] > 1- tol)
       f[j*K[0]+k] = 1- tol;

  }
}



}

free(aNorm);
free(fnew);
free(bNorm);

}

void calc_res(double **pi,double **r, double *mean_r, int **g, double **q, double **f, int K, int nSites, int nInd){
